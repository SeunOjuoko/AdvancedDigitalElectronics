


ARM Macro Assembler    Page 1 


    1 00000000         ;-------------------------------------------------------
                       -----------------------------------------------
    2 00000000         ; Design and Implementation of an AHB timer, a GPIO peri
                       pheral, and a 7-segment display peripheral  
    3 00000000         ; 
    4 00000000         ; 1) display text string: "INT" on VGA.
    5 00000000         ; 2) continously poll switches and output their values t
                       o LEDs. 
    6 00000000         ; 3) on (timer) interrupt, write the (16 MSBs of the) ti
                       mer value to the 7-segment display.
    7 00000000         ;
    8 00000000         ; As described in B31DE lecture 6 March 2023.
    9 00000000         ; This program is for use with AHBTIMER2023.v and AHBGPI
                       O2023.v peripherals.
   10 00000000         ;
   11 00000000         ;-------------------------------------------------------
                       -----------------------------------------------
   12 00000000         
   13 00000000 50000000 
                       VGA_base_address
                               EQU              0x50000000
   14 00000000 51000000 
                       UART_base_address
                               EQU              0x51000000
   15 00000000 54000000 
                       SEVEN_SEG_base_address
                               EQU              0x54000000
   16 00000000 54000000 
                       SEVEN_SEG_DIGIT1
                               EQU              0x54000000
   17 00000000 54000004 
                       SEVEN_SEG_DIGIT2
                               EQU              0x54000004
   18 00000000 54000008 
                       SEVEN_SEG_DIGIT3
                               EQU              0x54000008
   19 00000000 5400000C 
                       SEVEN_SEG_DIGIT4
                               EQU              0x5400000C
   20 00000000 52000000 
                       TIMER_base_address
                               EQU              0x52000000
   21 00000000 53000004 
                       GPIO_write_address
                               EQU              0x53000004
   22 00000000 53000000 
                       GPIO_read_address
                               EQU              0x53000000
   23 00000000         
   24 00000000 E000E100 
                       IRQ_enable_register
                               EQU              0xE000E100
   25 00000000 00000001 
                       enable_IRQ0
                               EQU              0x00000001
   26 00000000         
   27 00000000 00004000 
                       initial_MSP
                               EQU              0x00004000



ARM Macro Assembler    Page 2 


   28 00000000         
   29 00000000         
   30 00000000         ; exception vector table to start at address 0x00000000
   31 00000000         
   32 00000000                 PRESERVE8
   33 00000000                 THUMB
   34 00000000         
   35 00000000                 AREA             RESET, DATA, READONLY
   36 00000000                 EXPORT           __Vectors
   37 00000000         
   38 00000000         __Vectors
   39 00000000 00004000        DCD              initial_MSP ; initial main stac
                                                            k pointer
   40 00000004 00000000        DCD              Reset_Handler ; reset vector
   41 00000008 00000000        DCD              0           ; NMI vector
   42 0000000C 00000000        DCD              0           ; hard fault vector
                                                            
   43 00000010 00000000        DCD              0           ; not used
   44 00000014 00000000        DCD              0           ; not used
   45 00000018 00000000        DCD              0           ; not used
   46 0000001C 00000000        DCD              0           ; not used
   47 00000020 00000000        DCD              0           ; not used
   48 00000024 00000000        DCD              0           ; not used
   49 00000028 00000000        DCD              0           ; not used
   50 0000002C 00000000        DCD              0           ; SVC vector
   51 00000030 00000000        DCD              0           ; not used
   52 00000034 00000000        DCD              0           ; not used
   53 00000038 00000000        DCD              0           ; PendSV vector
   54 0000003C 00000000        DCD              0           ; SysTick vector
   55 00000040         
   56 00000040         ; external interrupts (IRQs)
   57 00000040         
   58 00000040 00000000        DCD              Timer_Handler ; IRQ #0 vector
   59 00000044 00000000        DCD              0           ; IRQ #1 vector
   60 00000048 00000000        DCD              0           ; IRQ #2 vector
   61 0000004C 00000000        DCD              0           ; IRQ #3 vector
   62 00000050 00000000        DCD              0           ; IRQ #4 vector
   63 00000054 00000000        DCD              0           ; IRQ #5 vector
   64 00000058 00000000        DCD              0           ; IRQ #6 vector
   65 0000005C 00000000        DCD              0           ; IRQ #7 vector
   66 00000060 00000000        DCD              0           ; IRQ #8 vector
   67 00000064 00000000        DCD              0           ; IRQ #9 vector
   68 00000068 00000000        DCD              0           ; IRQ #10 vector
   69 0000006C 00000000        DCD              0           ; IRQ #11 vector
   70 00000070 00000000        DCD              0           ; IRQ #12 vector
   71 00000074 00000000        DCD              0           ; IRQ #13 vector
   72 00000078 00000000        DCD              0           ; IRQ #14 vector
   73 0000007C 00000000        DCD              0           ; IRQ #15 vector
   74 00000080         
   75 00000080                 AREA             |.text|, CODE, READONLY
   76 00000000         
   77 00000000         Reset_Handler
                               PROC
   78 00000000                 GLOBAL           Reset_Handler
   79 00000000                 ENTRY
   80 00000000         
   81 00000000 4917            LDR              R1, =IRQ_enable_register ; enab
                                                            le IRQ #0 interrupt
                                                            s



ARM Macro Assembler    Page 3 


   82 00000002 4818            LDR              R0, =enable_IRQ0
   83 00000004 6008            STR              R0, [R1]
   84 00000006         
   85 00000006 4918            LDR              R1, =VGA_base_address ; write '
                                                            INT' to VGA text di
                                                            splay
   86 00000008 4A18            LDR              R2, =UART_base_address ; and to
                                                             terminal attached 
                                                            to UART
   87 0000000A         
   88 0000000A 2049            MOVS             R0, #'I'
   89 0000000C 6008            STR              R0, [R1]
   90 0000000E 6010            STR              R0, [R2]
   91 00000010         
   92 00000010 204E            MOVS             R0, #'N'
   93 00000012 6008            STR              R0, [R1]
   94 00000014 6010            STR              R0, [R2]
   95 00000016         
   96 00000016 2054            MOVS             R0, #'T'
   97 00000018 6008            STR              R0, [R1]
   98 0000001A 6010            STR              R0, [R2]
   99 0000001C         
  100 0000001C 4914            LDR              R1, =GPIO_read_address ; R1 poi
                                                            nts to GPIO input (
                                                            switches)
  101 0000001E 4F15            LDR              R7, =GPIO_write_address ; R7 po
                                                            ints to GPIO output
                                                             (LEDs)
  102 00000020         
  103 00000020         ; main (endless) loop of program
  104 00000020         ;
  105 00000020         ; In this example program, R1 and R7 must not be altered
                        by any interrupt service routine (ISR).
  106 00000020         ; In the Cortex M0, registers R0, R1, R2, R3, R12, R14 (
                       LR), R15 (PC), and xPSR are automatically
  107 00000020         ; preserved by stacking and unstacking operations during
                        ISR entry and return.
  108 00000020         ; These registers may be used/altered by the (ISR).
  109 00000020         ; But if R7 is used/altered by the interrupt service rou
                       tine, it will need explicitly to be stored
  110 00000020         ; (PUSH) and restored (POP) at start and end of routine.
                       
  111 00000020         main_loop
  112 00000020         
  113 00000020 6808            LDR              R0, [R1]    ; read switches
  114 00000022 6038            STR              R0, [R7]    ; write to LEDs
  115 00000024         
  116 00000024 E7FC            B                main_loop
  117 00000026         
  118 00000026                 ENDP                         ; matches PROC at s
                                                            tart of Reset_Handl
                                                            er
  119 00000026         
  120 00000026         Timer_Handler
                               PROC
  121 00000026                 EXPORT           Timer_Handler
  122 00000026         
  123 00000026         ; Any registers other than R0, R1, R2, R3, R12, R14 (LR)
                       , R15 (PC), and xPSR



ARM Macro Assembler    Page 4 


  124 00000026         ; used/altered in this interrupt service routine must ex
                       plicitly be stored (PUSH)
  125 00000026         ; and restored (POP) at the start and end of the routine
                       .
  126 00000026         ;
  127 00000026         ; In this example program it's been decided arbitrarily 
                       to use registers R6 and R7.
  128 00000026         ; Consequently it's necessary to store and restore these
                        (to/from the stack).
  129 00000026         ; It's because R6 and R7 are used in the ISR that they a
                       re stored/restored,
  130 00000026         ; not because they are used elsewhere. 
  131 00000026         
  132 00000026 B4C0            PUSH             {R6, R7}    ; save R6 and R7 as
                                                             they are used
  133 00000028         ; in this ISR
  134 00000028         
  135 00000028         ; read the current timer value, and display its 16 MSBs 
                       as 4 hex digits
  136 00000028         ; on the seven-segment display
  137 00000028         
  138 00000028 4E13            LDR              R6, =TIMER_base_address ; read 
                                                            32-bit timer value 
                                                            into R7
  139 0000002A 6837            LDR              R7, [R6]
  140 0000002C         
  141 0000002C 4A13            LDR              R2, =0x0F   ; R2 used to mask o
                                                            ff all but 4 LSBs
  142 0000002E         
  143 0000002E 0C38            LSRS             R0, R7, #16 ; right shift R7 16
                                                             bits into R0  
  144 00000030 4010            ANDS             R0, R0, R2  ; mask all but 4 LS
                                                            Bs of R0
  145 00000032 4913            LDR              R1, =SEVEN_SEG_DIGIT1 ; display
                                                             that 4-bit hex dig
                                                            it
  146 00000034 6008            STR              R0, [R1]    ; right most seven 
                                                            segment digit
  147 00000036         
  148 00000036 4B0C            LDR              R3, =VGA_base_address
  149 00000038 2508            MOVS             R5, #8
  150 0000003A 601D            STR              R5, [R3]
  151 0000003C 2630            MOVS             R6, #48
  152 0000003E 0005            MOVS             R5, R0
  153 00000040 4435            ADD              R5, R5, R6
  154 00000042 601D            STR              R5, [R3]
  155 00000044         
  156 00000044 0D38            LSRS             R0, R7, #20 ; right shift R7 20
                                                             bits into R0
  157 00000046 4010            ANDS             R0, R0, R2  ; mask all but 4 LS
                                                            Bs of R0
  158 00000048 490E            LDR              R1, =SEVEN_SEG_DIGIT2 ; display
                                                             that 4-bit hex dig
                                                            it
  159 0000004A 6008            STR              R0, [R1]    ; right most but on
                                                            e seven segment dig
                                                            it
  160 0000004C         
  161 0000004C 0E38            LSRS             R0, R7, #24 ; right shift R7 24



ARM Macro Assembler    Page 5 


                                                             bits into R0  
  162 0000004E 4010            ANDS             R0, R0, R2  ; mask all but 4 LS
                                                            Bs of R0
  163 00000050 490D            LDR              R1, =SEVEN_SEG_DIGIT3 ; display
                                                             that 4-bit hex dig
                                                            it
  164 00000052 6008            STR              R0, [R1]    ; right most but tw
                                                            o seven segment dig
                                                            it
  165 00000054         
  166 00000054 0F38            LSRS             R0, R7, #28 ; right shift R7 28
                                                             bits into R0
  167 00000056 4010            ANDS             R0, R0, R2  ; mask all but 4 LS
                                                            Bs of R0
  168 00000058 490C            LDR              R1, =SEVEN_SEG_DIGIT4 ; display
                                                             that 4-bit hex dig
                                                            it
  169 0000005A 6008            STR              R0, [R1]    ; left most seven s
                                                            egment digit
  170 0000005C         
  171 0000005C BCC0            POP              {R6, R7}    ; restore R6 and R7
                                                            
  172 0000005E         
  173 0000005E 4770            BX               LR          ; return from inter
                                                            rupt service routin
                                                            e
  174 00000060         ;   MOV  PC, LR     ; could use this alternative form of
                        return from ISR
  175 00000060         
  176 00000060                 ENDP                         ; matches PROC at s
                                                            tart of Timer_Handl
                                                            er
  177 00000060         
  178 00000060                 ALIGN            4           ; align to a word b
                                                            oundary
  179 00000060         
  180 00000060                 END
              E000E100 
              00000001 
              50000000 
              51000000 
              53000000 
              53000004 
              52000000 
              0000000F 
              54000000 
              54000004 
              54000008 
              5400000C 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M0 --apcs=interw
ork --depend=.\cm0dsasmint.d -o.\cm0dsasmint.o -I.\RTE\_Target_1 -IC:\Users\don
al\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\donal\
AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\Device\ARM\ARMCM0\Include --predefine="
__UVISION_VERSION SETA 537" --predefine="_RTE_ SETA 1" --predefine="ARMCM0 SETA
 1" --predefine="_RTE_ SETA 1" --list=.\cm0dsasmint.lst cm0dsasmINT.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RESET 00000000

Symbol: RESET
   Definitions
      At line 35 in file cm0dsasmINT.s
   Uses
      None
Comment: RESET unused
__Vectors 00000000

Symbol: __Vectors
   Definitions
      At line 38 in file cm0dsasmINT.s
   Uses
      At line 36 in file cm0dsasmINT.s
Comment: __Vectors used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 75 in file cm0dsasmINT.s
   Uses
      None
Comment: .text unused
Reset_Handler 00000000

Symbol: Reset_Handler
   Definitions
      At line 77 in file cm0dsasmINT.s
   Uses
      At line 40 in file cm0dsasmINT.s
      At line 78 in file cm0dsasmINT.s

Timer_Handler 00000026

Symbol: Timer_Handler
   Definitions
      At line 120 in file cm0dsasmINT.s
   Uses
      At line 58 in file cm0dsasmINT.s
      At line 121 in file cm0dsasmINT.s

main_loop 00000020

Symbol: main_loop
   Definitions
      At line 111 in file cm0dsasmINT.s
   Uses
      At line 116 in file cm0dsasmINT.s
Comment: main_loop used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

GPIO_read_address 53000000

Symbol: GPIO_read_address
   Definitions
      At line 22 in file cm0dsasmINT.s
   Uses
      At line 100 in file cm0dsasmINT.s
Comment: GPIO_read_address used once
GPIO_write_address 53000004

Symbol: GPIO_write_address
   Definitions
      At line 21 in file cm0dsasmINT.s
   Uses
      At line 101 in file cm0dsasmINT.s
Comment: GPIO_write_address used once
IRQ_enable_register E000E100

Symbol: IRQ_enable_register
   Definitions
      At line 24 in file cm0dsasmINT.s
   Uses
      At line 81 in file cm0dsasmINT.s
Comment: IRQ_enable_register used once
SEVEN_SEG_DIGIT1 54000000

Symbol: SEVEN_SEG_DIGIT1
   Definitions
      At line 16 in file cm0dsasmINT.s
   Uses
      At line 145 in file cm0dsasmINT.s
Comment: SEVEN_SEG_DIGIT1 used once
SEVEN_SEG_DIGIT2 54000004

Symbol: SEVEN_SEG_DIGIT2
   Definitions
      At line 17 in file cm0dsasmINT.s
   Uses
      At line 158 in file cm0dsasmINT.s
Comment: SEVEN_SEG_DIGIT2 used once
SEVEN_SEG_DIGIT3 54000008

Symbol: SEVEN_SEG_DIGIT3
   Definitions
      At line 18 in file cm0dsasmINT.s
   Uses
      At line 163 in file cm0dsasmINT.s
Comment: SEVEN_SEG_DIGIT3 used once
SEVEN_SEG_DIGIT4 5400000C

Symbol: SEVEN_SEG_DIGIT4
   Definitions
      At line 19 in file cm0dsasmINT.s
   Uses
      At line 168 in file cm0dsasmINT.s
Comment: SEVEN_SEG_DIGIT4 used once
SEVEN_SEG_base_address 54000000

Symbol: SEVEN_SEG_base_address



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 15 in file cm0dsasmINT.s
   Uses
      None
Comment: SEVEN_SEG_base_address unused
TIMER_base_address 52000000

Symbol: TIMER_base_address
   Definitions
      At line 20 in file cm0dsasmINT.s
   Uses
      At line 138 in file cm0dsasmINT.s
Comment: TIMER_base_address used once
UART_base_address 51000000

Symbol: UART_base_address
   Definitions
      At line 14 in file cm0dsasmINT.s
   Uses
      At line 86 in file cm0dsasmINT.s
Comment: UART_base_address used once
VGA_base_address 50000000

Symbol: VGA_base_address
   Definitions
      At line 13 in file cm0dsasmINT.s
   Uses
      At line 85 in file cm0dsasmINT.s
      At line 148 in file cm0dsasmINT.s

enable_IRQ0 00000001

Symbol: enable_IRQ0
   Definitions
      At line 25 in file cm0dsasmINT.s
   Uses
      At line 82 in file cm0dsasmINT.s
Comment: enable_IRQ0 used once
initial_MSP 00004000

Symbol: initial_MSP
   Definitions
      At line 27 in file cm0dsasmINT.s
   Uses
      At line 39 in file cm0dsasmINT.s
Comment: initial_MSP used once
13 symbols
354 symbols in table
